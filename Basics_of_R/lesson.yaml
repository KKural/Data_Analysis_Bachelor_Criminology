# ========== 1. META BLOCK ==========
- Class: meta
  Course: "Data Analysis - Bachelor Criminology"
  Lesson: "Data Inspection with crime_stats_ghent"
  Author: "Kural K."
  Type: Standard
  Organization: "UGent"
  Version: "2.5"

# ========== 2. WELCOME MESSAGE (padded) ==========
- Class: text
  Output: |
    In this lesson, you will work with a **pre-loaded synthetic** dataset, `crime_stats_ghent`.
    This simulated data mimics real criminology statistics so you can safely explore
    and practise basic R inspection functions.
    You‚Äôll learn to load packages, view the first rows, inspect structure,
    check class, dimensions, length, glimpse, and summary.
  CorrectAnswer: ""
  AnswerTests:  ""
  Hint:         ""
  Feedback:     ""

# ========== 3. QUESTIONS ==========
- Class: cmd_question
  Output: Q1  Load the **dplyr** package.
  CorrectAnswer: library(dplyr)
  AnswerTests: omnitest(correctExpr = "library(dplyr)")
  Hint: "Use `library(dplyr)` to load the package."
  Feedback: |
    ‚úîÔ∏è Correct! The **dplyr** package is loaded.
    ‚ùå Try `library(dplyr)`.

- Class: cmd_question
  Output: Q2  Show the first 6 rows of `crime_stats_ghent`.
  CorrectAnswer: head(crime_stats_ghent)
  AnswerTests: omnitest(correctExpr = "head(crime_stats_ghent)")
  Hint: "Use `head(crime_stats_ghent)`."
  Feedback: |
    ‚úîÔ∏è Well done! You‚Äôve peeked at the top of your data.
    ‚ùå Try `head(crime_stats_ghent)`.

- Class: cmd_question
  Output: Q3  What are the column names of `crime_stats_ghent`?
  CorrectAnswer: colnames(crime_stats_ghent)
  AnswerTests: omnitest(correctExpr = "colnames(crime_stats_ghent)")
  Hint: "Use `colnames()` on the data frame."
  Feedback: |
    ‚úîÔ∏è Correct! Those are the variable names.
    ‚ùå Use `colnames(crime_stats_ghent)`.

- Class: cmd_question
  Output: Q4  Display the structure of `crime_stats_ghent`.
  CorrectAnswer: str(crime_stats_ghent)
  AnswerTests: omnitest(correctExpr = "str(crime_stats_ghent)")
  Hint: "Use `str()` to view types and sample values."
  Feedback: |
    ‚úîÔ∏è Good! `str()` shows each column‚Äôs type and preview.
    ‚ùå Try `str(crime_stats_ghent)`.

- Class: cmd_question
  Output: Q5  Determine the class of `crime_stats_ghent`.
  CorrectAnswer: class(crime_stats_ghent)
  AnswerTests: omnitest(correctExpr = "class(crime_stats_ghent)")
  Hint: "Use `class()` to inspect the object type."
  Feedback: |
    ‚úîÔ∏è Correct! That tells you whether it‚Äôs a data frame, tibble, etc.
    ‚ùå Use `class(crime_stats_ghent)`.

- Class: cmd_question
  Output: Q6  Get the dimensions (rows, columns) of `crime_stats_ghent`.
  CorrectAnswer: dim(crime_stats_ghent)
  AnswerTests: omnitest(correctExpr = "dim(crime_stats_ghent)")
  Hint: "Use `dim()` for a two-element vector."
  Feedback: |
    ‚úîÔ∏è Excellent! You know the size of your data.
    ‚ùå Try `dim(crime_stats_ghent)`.

- Class: cmd_question
  Output: Q7  How many entries are in the `district` column?
  CorrectAnswer: length(crime_stats_ghent$district)
  AnswerTests: omnitest(correctExpr = "length(crime_stats_ghent$district)")
  Hint: "Use `length()` on the vector."
  Feedback: |
    ‚úîÔ∏è Nice! That tells you how many rows exist for that column.
    ‚ùå Use `length(crime_stats_ghent$district)`.

- Class: cmd_question
  Output: Q8  Use `glimpse()` to inspect `crime_stats_ghent`.
  CorrectAnswer: glimpse(crime_stats_ghent)
  AnswerTests: omnitest(correctExpr = "glimpse(crime_stats_ghent)")
  Hint: "`glimpse()` is in **tibble** (loaded with dplyr)."
  Feedback: |
    ‚úîÔ∏è Great! `glimpse()` gives a transposed overview.
    ‚ùå Try `glimpse(crime_stats_ghent)`.

- Class: cmd_question
  Output: Q9  Provide a statistical summary of all columns in `crime_stats_ghent`.
  CorrectAnswer: summary(crime_stats_ghent)
  AnswerTests: omnitest(correctExpr = "summary(crime_stats_ghent)")
  Hint: "Use base R‚Äôs `summary()`."
  Feedback: |
    ‚úîÔ∏è Excellent! You see mins, maxes, medians, means, quartiles.
    ‚ùå Use `summary(crime_stats_ghent)`.

- Class: cmd_question
  Output: Q10  Count any missing values in `crime_stats_ghent`.
  CorrectAnswer: sum(is.na(crime_stats_ghent))
  AnswerTests: omnitest(correctExpr = "sum(is.na(crime_stats_ghent))")
  Hint: "Combine `is.na()` with `sum()`."
  Feedback: |
    ‚úîÔ∏è Perfect! You know how many NAs are present.
    ‚ùå Try `sum(is.na(crime_stats_ghent))`.

- Class: cmd_question
  Output: Q11  What is the maximum `property_crimes` value in `crime_stats_ghent`?
  CorrectAnswer: max(crime_stats_ghent$property_crimes)
  AnswerTests: omnitest(correctExpr = "max(crime_stats_ghent$property_crimes)")
  Hint: "Use `max()` on the `property_crimes` column."
  Feedback: |
    ‚úîÔ∏è Great! That shows the highest number of property crimes recorded.
    ‚ùå Try `max(crime_stats_ghent$property_crimes)`.

- Class: cmd_question
  Output: Q12  How many distinct crime types are in `crime_stats_ghent`?
  CorrectAnswer: length(unique(crime_stats_ghent$crime_type))
  AnswerTests: omnitest(correctExpr = "length(unique(crime_stats_ghent$crime_type))")
  Hint: "Combine `unique()` and `length()` on the `crime_type` column."
  Feedback: |
    ‚úîÔ∏è Correct! You‚Äôve counted the different crime categories.
    ‚ùå Try `length(unique(crime_stats_ghent$crime_type))`.

- Class: cmd_question
  Output: Q13  What is the average `feel_safe_day` score in `fear_of_crime_survey`?
  CorrectAnswer: mean(fear_of_crime_survey$feel_safe_day)
  AnswerTests: omnitest(correctExpr = "mean(fear_of_crime_survey$feel_safe_day)")
  Hint: "Use `mean()` on the `feel_safe_day` column."
  Feedback: |
    ‚úîÔ∏è Nicely done! That gives the average daytime safety feeling.
    ‚ùå Try `mean(fear_of_crime_survey$feel_safe_day)`.

- Class: cmd_question
  Output: Q14  Which neighborhood has the highest `urban_density` in `neighborhood_index`?
  CorrectAnswer: neighborhood_index$neighborhood[which.max(neighborhood_index$urban_density)]
  AnswerTests: omnitest(correctExpr = "neighborhood_index$neighborhood[which.max(neighborhood_index$urban_density)]")
  Hint: "Use `which.max()` on `urban_density`, then index `neighborhood`."
  Feedback: |
    ‚úîÔ∏è Correct! That neighborhood is the most densely populated.
    ‚ùå Try `neighborhood_index$neighborhood[which.max(neighborhood_index$urban_density)]`.

- Class: cmd_question
  Output: Q15  What is the mean `clearance_rate` in `police_effort_index`?
  CorrectAnswer: mean(police_effort_index$clearance_rate)
  AnswerTests: omnitest(correctExpr = "mean(police_effort_index$clearance_rate)")
  Hint: "Use `mean()` on the `clearance_rate` column."
  Feedback: |
    ‚úîÔ∏è Excellent! That tells you the average clearance rate across districts.
    ‚ùå Try `mean(police_effort_index$clearance_rate)`.

# ========== 4. COMPLETION MESSAGE (padded) ==========
- Class: text
  Output: |
    üéâ You have completed the Data Inspection lesson!
    You‚Äôve mastered the essentials of examining your datasets.
  CorrectAnswer: ""
  AnswerTests:  ""
  Hint:         ""
  Feedback:     ""
